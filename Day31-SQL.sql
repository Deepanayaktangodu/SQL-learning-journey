Create Table Restaurants (
							RestaurantID int Primary Key,
							RestaurantName varchar(100) not null,
							City varchar(50) not null,
							JoinDate date not null default getdate() check(JoinDate<=getdate()),
							Rating decimal (5,2) not null check (Rating>=0)
						);

Create table Customers (
						CustomerID int Primary Key,
						CustomerName varchar(100) not null check(len(CustomerName)>3),
						City varchar(50) not null,
						JoinDate date not null default getdate() check (JoinDate<=getdate())
						);

Create table Orders (
						OrderID int Primary Key,
						CustomerID int not null,
						RestaurantID int not null,
						OrderDate date default getdate() not null,
						TotalAmount decimal (10,2) not null check (TotalAmount>0),
						Status varchar(30) not null check (Status in ('Delivered','Cancelled')),
						foreign key (CustomerID) references Customers(CustomerID) on update cascade on delete no action,
						foreign key (RestaurantID) references Restaurants(RestaurantID) on update cascade on delete cascade,
						unique(OrderID,CustomerID,RestaurantID)
					);

Create table MenuItems (
						ItemID int Primary Key,
						RestaurantID int not null,
						ItemName varchar(100) not null check(len(ItemName)>3),
						Category varchar(50) not null check(len(Category)>3),
						Price decimal (10,2) not null check (Price>0),
						foreign key(RestaurantID) references Restaurants(RestaurantID) on update cascade on delete no action
						);

Create Index Idx_Orders_CustomerID on Orders(CustomerID);
Create Index Idx_Orders_RestaurantID on Orders(RestaurantID);
Create Index Idx_MenuItems_RestaurantID on MenuItems(RestaurantID);
Create Index Idx_Restaurants_RestaurantID on Restaurants(RestaurantID);
Create index Idx_Restaurants_RestaurantName on Restaurants(RestaurantName);
Create Index Idx_Customers_CustomerID on Customers(CustomerID);
Create Index Idx_Customers_CustomerName on Customers(CustomerName);

INSERT INTO Restaurants VALUES
(1, 'SpiceHub', 'Delhi', '2020-03-15', 4.5),
(2, 'UrbanEats', 'Mumbai', '2019-11-10', 4.2),
(3, 'TandooriTales', 'Bangalore', '2021-01-05', 4.8),
(4, 'PizzaPalace', 'Pune', '2022-06-18', 4.0);

INSERT INTO Customers VALUES
(1, 'Ravi Kumar', 'Delhi', '2021-02-15'),
(2, 'Simran Kaur', 'Mumbai', '2020-03-20'),
(3, 'John Smith', 'Bangalore', '2022-06-10'),
(4, 'Asha Gupta', 'Pune', '2021-07-25');

INSERT INTO Orders VALUES
(101, 1, 1, '2023-01-15', 1200, 'Delivered'),
(102, 2, 2, '2023-02-17', 800, 'Cancelled'),
(103, 1, 4, '2023-03-20', 500, 'Delivered'),
(104, 3, 3, '2023-03-22', 950, 'Delivered'),
(105, 4, 2, '2023-04-10', 650, 'Delivered'),
(106, 2, 1, '2023-05-14', 1200, 'Delivered');

INSERT INTO MenuItems VALUES
(201, 1, 'Paneer Butter Masala', 'North Indian', 350),
(202, 1, 'Garlic Naan', 'North Indian', 50),
(203, 2, 'Veg Burger', 'Fast Food', 150),
(204, 2, 'Cheese Pizza', 'Fast Food', 400),
(205, 3, 'Chicken Biryani', 'Hyderabadi', 450),
(206, 4, 'Pepperoni Pizza', 'Fast Food', 500);

Select * from Restaurants 
Select * from Customers 
Select * from Orders 
Select * from MenuItems 

--1) Calculate total revenue generated by each restaurant in 2023.
Select
	r.RestaurantID,r.RestaurantName,
	SUM(o.TotalAmount) as [Total Revenue 2023]
from Restaurants r
join Orders o
on r.RestaurantID =o.RestaurantID 
WHERE 
    o.Status = 'Delivered' AND
    YEAR(o.OrderDate) = 2023
GROUP BY r.RestaurantID, r.RestaurantName
ORDER BY [Total Revenue 2023] DESC;

--2) Find the top 2 restaurants by revenue.
Select Top 2
	r.RestaurantID,r.RestaurantName,r.City,
	SUM(o.TotalAmount) as [Total Revenue]
from Restaurants r
join Orders o
on r.RestaurantID =o.RestaurantID 
where o.Status = 'Delivered'
Group by r.RestaurantID,r.RestaurantName,r.City
Order by [Total Revenue] Desc;

--3) List customers who have placed orders from more than 1 city.
Select
	c.CustomerID,c.CustomerName,
	Count (Distinct r.City) as [City Count]
from Customers c
join Orders o
on c.CustomerID =o.CustomerID 
join Restaurants r
on r.RestaurantID =o.RestaurantID 
Group by c.CustomerID,c.CustomerName
having Count (Distinct r.City)>1
Order by[City Count] Desc;

--4) Identify restaurants that have never had a cancelled order.
SELECT 
    r.RestaurantID,r.RestaurantName
FROM Restaurants r
LEFT JOIN Orders o 
ON r.RestaurantID = o.RestaurantID AND o.Status = 'Cancelled'
WHERE o.OrderID IS NULL;

--Alternative method
SELECT 
    r.RestaurantID,r.RestaurantName
FROM Restaurants r
WHERE r.RestaurantID NOT IN (
        SELECT DISTINCT RestaurantID 
        FROM Orders 
        WHERE Status = 'Cancelled');

--5) Calculate month-over-month revenue growth for each restaurant.
WITH MonthlyRevenue AS (
    SELECT
        r.RestaurantID,r.RestaurantName,
        YEAR(o.OrderDate) AS Year,
        MONTH(o.OrderDate) AS Month,
        SUM(o.TotalAmount) AS MonthlyRevenue
    FROM 
        Restaurants r
    JOIN 
        Orders o ON r.RestaurantID = o.RestaurantID
    WHERE 
        o.Status = 'Delivered'
    GROUP BY 
        r.RestaurantID, r.RestaurantName, YEAR(o.OrderDate), MONTH(o.OrderDate)
),
RevenueWithPrevious AS (
    SELECT
        *,
        LAG(MonthlyRevenue) OVER (
            PARTITION BY RestaurantID 
            ORDER BY Year, Month
        ) AS PreviousMonthRevenue
    FROM MonthlyRevenue)
SELECT
    RestaurantID,RestaurantName,Year,Month,MonthlyRevenue,PreviousMonthRevenue,
    CASE 
        WHEN PreviousMonthRevenue IS NULL THEN NULL
        WHEN PreviousMonthRevenue = 0 THEN NULL
        ELSE ROUND(((MonthlyRevenue - PreviousMonthRevenue) / PreviousMonthRevenue) * 100, 2)
    END AS MoMGrowthPercentage
FROM 
    RevenueWithPrevious
ORDER BY 
    RestaurantID, Year, Month;

--6) Find the most expensive menu item for each restaurant.
WITH RankedItems AS (
    SELECT
        r.RestaurantID,r.RestaurantName,
        m.ItemID,m.ItemName,m.Price,m.Category,
        RANK() OVER (PARTITION BY r.RestaurantID ORDER BY m.Price DESC) AS PriceRank
    FROM 
        Restaurants r
    JOIN 
        MenuItems m ON r.RestaurantID = m.RestaurantID)
SELECT
    RestaurantID,RestaurantName,
    ItemID,ItemName,
    Price AS [Most Expensive Price],
    Category
FROM 
    RankedItems
WHERE 
    PriceRank = 1
ORDER BY 
    Price DESC;

--7) List menu categories that appear in at least 2 different restaurants.
SELECT
    m.Category,
    COUNT(DISTINCT m.RestaurantID) AS RestaurantCount
FROM MenuItems m
GROUP BY m.Category
HAVING COUNT(DISTINCT m.RestaurantID) >= 2
ORDER BY RestaurantCount DESC;

--8) Retrieve each customer's first and most recent order date.
Select
	c.CustomerID,c.CustomerName,
	MIN(o.OrderDate) as [First Order Date],
	MAX(o.OrderDate) as [Recent Order Date]
from Customers c
join Orders o
on c.CustomerID =o.CustomerID 
Group by c.CustomerID,c.CustomerName;

--9) Calculate running total revenue for each restaurant.
SELECT
    r.RestaurantID,r.RestaurantName,
    o.OrderDate,o.TotalAmount,
    SUM(o.TotalAmount) OVER (
        PARTITION BY r.RestaurantID
        ORDER BY o.OrderDate
        ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
    ) AS RunningTotalRevenue
FROM
    Restaurants r
JOIN
    Orders o ON r.RestaurantID = o.RestaurantID
WHERE
    o.Status = 'Delivered'  -- Only count successful orders
ORDER BY
    r.RestaurantID,o.OrderDate;

--10) Find restaurants where all menu items are priced above 100.
SELECT 
    r.RestaurantID,r.RestaurantName
FROM 
    Restaurants r
WHERE NOT EXISTS (
    SELECT 1
    FROM MenuItems m
    WHERE m.RestaurantID = r.RestaurantID
    AND m.Price <= 100  -- Find any item priced 100 or below
)
AND EXISTS (
    SELECT 1
    FROM MenuItems m
    WHERE m.RestaurantID = r.RestaurantID
)  -- Ensure restaurant has at least one menu item
ORDER BY 
    r.RestaurantID;

-- Bonus: 
--Determine each restaurant's contribution (%) to total platform revenue.
With RestaurantRevenue as (
				Select
					r.RestaurantID,r.RestaurantName,
					SUM(o.TotalAmount) as Revenue
				from Restaurants r
				join Orders o
				on r.RestaurantID =o.RestaurantID 
				where o.Status ='Delivered'
				group by r.RestaurantID,r.RestaurantName),
TotalRevenue AS (
    SELECT SUM(Revenue) AS Total FROM RestaurantRevenue)
SELECT
    rr.RestaurantID,rr.RestaurantName,rr.Revenue,
    ROUND((rr.Revenue / tr.Total) * 100, 2) AS RevenueContributionPercentage
FROM
    RestaurantRevenue rr
CROSS JOIN
    TotalRevenue tr
ORDER BY
    rr.Revenue DESC;
