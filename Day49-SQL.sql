Create Table Doctors(
						DoctorID Int Primary Key,
						Name Varchar(75) Not Null Check(Len(Name)>=2),
						Speciality Varchar(75) Not Null Check(Len(Speciality)>=2),
						JoinDate Date Not Null Default GetDate(),
						Salary Decimal(10,2) Not Null Check(Salary>=0)
					);

Create Table Patients(
						PatientID Int Primary Key,
						Name Varchar(50) Not Null Check(Len(Name)>=2),
						Age Int Not Null Check(Age>0 AND Age<=120),
						Gender char(1) Not Null Check(Gender in ('F','M')),
						Country Varchar(75) Not Null Check(Len(Country)>=2)
					);

Create Table Appointments (
							AppointmentID Int Primary Key,
							PatientID Int Not Null,
							DoctorID Int Not Null,
							AppointmentDate Date Not NUll Default Getdate(),
							Status Varchar(50) Not Null Check(Status in ('Completed','Cancelled','No Show')),
							Fees Decimal(6,2) Null Check(Fees>=0),
							Foreign Key(PatientID) references Patients(PatientID) on update cascade on delete no action,
							Foreign Key(DoctorID) references Doctors(DoctorID) on update cascade on delete no action
						);


Create Index Idx_Doctors_Name on Doctors(Name);
Create Index Idx_Doctors_Speciality on Doctors(Speciality);
Create Index Idx_Doctors_Salary on Doctors(Salary);
Create Index Idx_Patients_Name on Patients(Name);
Create Index Idx_Patients_Age on Patients(Age);
Create Index Idx_Patients_Gender on Patients(Gender);
Create Index Idx_Patients_Country on Patients(Country);
Create Index Idx_Appointments_PatientID on Appointments(PatientID);
Create Index Idx_Appointments_DoctorID on Appointments(DoctorID);
Create Index Idx_Appointments_Patient_Doctor ON Appointments(PatientID, DoctorID);

INSERT INTO Doctors (DoctorID, Name, Speciality, JoinDate, Salary) VALUES
(1, 'Dr. Smith', 'Cardiology', '2020-01-01', 120000),
(2, 'Dr. Lee', 'Neurology', '2021-03-10', 110000),
(3, 'Dr. Patel', 'Orthopedics', '2019-06-20', 95000),
(4, 'Dr. Brown', 'Pediatrics', '2022-01-15', 90000),
(5, 'Dr. Green', 'General Surgery', '2020-09-01', 100000);

INSERT INTO Patients (PatientID, Name, Age, Gender, Country) VALUES
(1, 'Alice', 34, 'F', 'USA'),
(2, 'Bob', 45, 'M', 'India'),
(3, 'Charlie', 29, 'M', 'UK'),
(4, 'David', 55, 'M', 'Canada'),
(5, 'Emma', 40, 'F', 'India');

INSERT INTO Appointments (AppointmentID, PatientID, DoctorID, AppointmentDate, Status, Fees) VALUES
(101, 1, 1, '2023-01-05', 'Completed', 300),
(102, 2, 2, '2023-01-06', 'Cancelled', 0),
(103, 3, 3, '2023-02-01', 'Completed', 250),
(104, 4, 1, '2023-02-15', 'Completed', 350),
(105, 5, 4, '2023-02-20', 'No Show', 0),
(106, 1, 5, '2023-03-01', 'Completed', 400),
(107, 2, 2, '2023-03-05', 'Completed', 320),
(108, 3, 3, '2023-03-10', 'Completed', 270),
(109, 5, 1, '2023-04-01', 'Completed', 310),
(110, 4, 5, '2023-04-05', 'Completed', 380);

Select * from Doctors 
Select * from Patients 
Select * from Appointments 

--1) Doctor Revenue
--Find the total revenue generated by each doctor (Completed appointments only).
Select
	d.DoctorID,d.Name as 'Doctor Name',d.Speciality,
	ROUND(SUM(COALESCE(a.Fees,0)),2) as [Revenue Generated]
from Doctors d
left join Appointments a on d.DoctorID =a.DoctorID 
where a.Status='Completed'
group by d.DoctorID,d.Name,d.Speciality 
order by [Revenue Generated] Desc;

--2) Most Frequent Patients
--List patients who visited the hospital more than 2 times.
Select
	p.PatientID,p.Name as 'Patient Name',p.Country,
	COUNT(a.AppointmentID) as [Appointment Count]
from Patients p
join Appointments a on p.PatientID =a.PatientID 
where a.Status ='Completed'
group by p.PatientID,p.Name,p.Country 
having COUNT(a.AppointmentID)>2
order by [Appointment Count] Desc;

--3) Specialty Popularity
--Rank doctor specialties based on the number of appointments.
SELECT
    d.Speciality,
    COUNT(a.AppointmentID) AS [Appointment Count],
    RANK() OVER (ORDER BY COUNT(a.AppointmentID) DESC) AS SpecialtyRank
FROM Doctors d
JOIN Appointments a ON d.DoctorID = a.DoctorID
GROUP BY d.Speciality
ORDER BY [Appointment Count] DESC;

--4) Cancellation & No-Show Rate
--Calculate the % of appointments that were Cancelled or No Show per doctor.
SELECT
    d.DoctorID,d.Name AS 'Doctor Name',d.Speciality,
    COUNT(a.AppointmentID) AS [Total Appointments],
    SUM(CASE WHEN a.Status = 'Cancelled' THEN 1 ELSE 0 END) AS 'Cancelled Appointments',
    SUM(CASE WHEN a.Status = 'No Show' THEN 1 ELSE 0 END) AS 'No Show Appointments',
    ROUND((SUM(CASE WHEN a.Status IN ('Cancelled', 'No Show') THEN 1 ELSE 0 END) * 100.0) / 
          COUNT(a.AppointmentID), 2) AS 'Cancellation & No-Show Rate (%)'
FROM Doctors d
JOIN Appointments a ON d.DoctorID = a.DoctorID
GROUP BY d.DoctorID, d.Name, d.Speciality
ORDER BY 'Cancellation & No-Show Rate (%)' DESC;

--5) High Revenue Patients
--Identify patients whose total spend is greater than 500.
Select
	p.PatientID,p.Name as 'Patient Name',p.Country,
	ROUND(SUM(a.Fees),2) as [Total Spend]
from Patients p
join Appointments a on p.PatientID =a.PatientID 
where a.Status ='Completed'
group by p.PatientID,p.Name,p.Country 
having SUM(a.Fees)>500
order by [Total Spend] Desc;

--6) Monthly Revenue Trend
--Show month-wise total revenue and compare with the previous month using LAG.
SELECT
    YEAR(a.AppointmentDate) AS [Year],
    DATENAME(MONTH, a.AppointmentDate) AS [Month],
    MONTH(a.AppointmentDate) AS [MonthNumber],
    SUM(a.Fees) AS [Total Revenue],
    LAG(SUM(a.Fees)) OVER (ORDER BY YEAR(a.AppointmentDate), MONTH(a.AppointmentDate)) AS [Previous Month Revenue],
    ROUND(SUM(a.Fees) - LAG(SUM(a.Fees)) OVER (ORDER BY YEAR(a.AppointmentDate), MONTH(a.AppointmentDate)), 2) AS [Revenue Change],
    ROUND(((SUM(a.Fees) - LAG(SUM(a.Fees)) OVER (ORDER BY YEAR(a.AppointmentDate), MONTH(a.AppointmentDate))) * 100.0) / 
          NULLIF(LAG(SUM(a.Fees)) OVER (ORDER BY YEAR(a.AppointmentDate), MONTH(a.AppointmentDate)), 0), 2) AS [Percentage Change (%)]
FROM Appointments a
WHERE a.Status = 'Completed'  -- Only consider completed appointments
GROUP BY YEAR(a.AppointmentDate), DATENAME(MONTH, a.AppointmentDate), MONTH(a.AppointmentDate)
ORDER BY [Year], [MonthNumber];

--7) Average Fees by Specialty
--Find average consultation fees per specialty.
Select
	d.Speciality,
	ROUND(AVG(a.Fees),2) as [Average Fees]
from Doctors d
join Appointments a on d.DoctorID =a.DoctorID 
group by d.Speciality 
order by [Average Fees] Desc;

--8) Doctors with Cross-Country Patients
--Find doctors who treated patients from more than 1 country.
SELECT
    d.DoctorID,d.Name AS 'Doctor Name',d.Speciality,
    COUNT(DISTINCT p.Country) AS [Number of Countries]
FROM Doctors d
JOIN Appointments a ON d.DoctorID = a.DoctorID 
JOIN Patients p ON p.PatientID = a.PatientID 
WHERE a.Status = 'Completed'
GROUP BY d.DoctorID, d.Name, d.Speciality
HAVING COUNT(DISTINCT p.Country) > 1
ORDER BY [Number of Countries] DESC;

--9) Longest Serving Doctor
--Find the doctor with the longest tenure in the hospital.
SELECT TOP 1 WITH TIES
    DoctorID,Name,Speciality,JoinDate,
    DATEDIFF(YEAR, JoinDate, GETDATE()) AS [Total Tenure Years],
    DATEDIFF(DAY, JoinDate, GETDATE()) AS [Total Tenure Days],
    FORMAT(JoinDate, 'MMMM dd, yyyy') AS [Formatted Join Date]
FROM Doctors
ORDER BY JoinDate ASC;

--10) Window Function – Patient Ranking
--Rank patients by their total spend within their country.
Select
	p.PatientID,p.Name as 'Patient Name',p.Country,
	ROUND(SUM(a.Fees),2) as [Total Spend],
	RANK() OVER (PARTITION BY p.Country Order by SUM(a.Fees) Desc) as [CountryRank],
	COUNT(a.AppointmentID) AS [Total Appointments],
    ROUND(AVG(a.Fees), 2) AS [Average Spend Per Appointment]
FROM Patients p
JOIN Appointments a ON p.PatientID = a.PatientID
WHERE a.Status = 'Completed'  -- Only consider completed appointments
GROUP BY p.PatientID, p.Name, p.Country
ORDER BY p.Country, [Total Spend] DESC;

--Bonus Challenge (Advanced)
--11) Doctor Utilization Rate
--Assume each doctor can take 20 appointments per month.
--Calculate doctor utilization = (Completed Appointments ÷ 20) × 100 for each month.
WITH MonthlyDoctorAppointments AS (
    SELECT
        d.DoctorID,d.Name AS 'Doctor Name',d.Speciality,
        YEAR(a.AppointmentDate) AS [Year],
        MONTH(a.AppointmentDate) AS [Month],
        DATENAME(MONTH, a.AppointmentDate) AS [MonthName],
        COUNT(CASE WHEN a.Status = 'Completed' THEN 1 END) AS [Completed Appointments],
        COUNT(a.AppointmentID) AS [Total Appointments]
    FROM Doctors d
    JOIN Appointments a ON d.DoctorID = a.DoctorID
    GROUP BY d.DoctorID, d.Name, d.Speciality, 
             YEAR(a.AppointmentDate), MONTH(a.AppointmentDate), DATENAME(MONTH, a.AppointmentDate)
)
SELECT
    DoctorID,[Doctor Name],Speciality,
    [Year],[Month],[MonthName],
    [Completed Appointments],[Total Appointments],
    20 AS [Monthly Capacity],
    ROUND(([Completed Appointments] * 100.0) / 20, 2) AS [Utilization Rate (%)],
    CASE 
        WHEN ([Completed Appointments] * 100.0) / 20 > 100 THEN 'Overutilized'
        WHEN ([Completed Appointments] * 100.0) / 20 >= 80 THEN 'Fully Utilized'
        WHEN ([Completed Appointments] * 100.0) / 20 >= 50 THEN 'Moderately Utilized'
        ELSE 'Underutilized'
    END AS [Utilization Status]
FROM MonthlyDoctorAppointments
ORDER BY [Year], [Month], [Utilization Rate (%)] DESC;