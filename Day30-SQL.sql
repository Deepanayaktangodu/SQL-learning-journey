Create table Sellers (
						SellerID int Primary key,
						SellerName varchar(100) not null unique Check(len(SellerName)>3),
						JoinDate date not null default getdate() check(JoinDate<=getdate()),
						City varchar(50) not null
					);

Create table Products (
						ProductID int Primary key,
						ProductName varchar(100) not null,
						Category varchar(50) not null,
						Price decimal (10,2) not null check (Price>0),
						SellerID int not null,
						foreign key (SellerID) references Sellers(SellerID) on update cascade on delete no action,
						unique (ProductName,SellerID)
						);

Create table Customers (
						CustomerID int primary key,
						CustomerName varchar(100) not null unique check(len(CustomerName)>3),
						City varchar(50) not null,
						JoinDate date not null default getdate() check(JoinDate<=getdate())
						);

Create table Orders (
						OrderID int Primary key,
						CustomerID int not null,
						ProductID int not null,
						OrderDate date not null,
						Quantity int not null check(Quantity>0),
						foreign key (CustomerID) references Customers(CustomerID) on update cascade ON DELETE no action,
						foreign key (ProductID) references Products(ProductID) on update cascade ON DELETE no action
					);

-- Single-column indexes
Create Index Idx_Products_SellerID on Products(SellerID);
Create Index Idx_Orders_CustomerID on Orders(CustomerID);
Create Index Idx_Orders_ProductID on Orders(ProductID);
CREATE INDEX Idx_Products_Category ON Products(Category);

-- Composite indexes for common query patterns
CREATE INDEX Idx_Orders_CustomerDate ON Orders(CustomerID, OrderDate);
CREATE INDEX Idx_Products_SellerCategory ON Products(SellerID, Category);
CREATE INDEX Idx_Sellers_City ON Sellers(City);

-- Additional recommended indexes for analytical queries
CREATE INDEX Idx_Orders_DateProduct ON Orders(OrderDate, ProductID);
CREATE INDEX Idx_Products_PriceCategory ON Products(Price, Category);

INSERT INTO Sellers VALUES
(1, 'TechWorld', '2021-05-10', 'Delhi'),
(2, 'StyleHub', '2020-08-15', 'Mumbai'),
(3, 'HomeNeeds', '2019-11-20', 'Bangalore'),
(4, 'GadgetMart', '2022-01-05', 'Pune');

INSERT INTO Products VALUES
(101, 'Laptop', 'Electronics', 55000, 1),
(102, 'Headphones', 'Electronics', 2500, 1),
(103, 'T-Shirt', 'Clothing', 800, 2),
(104, 'Jeans', 'Clothing', 1800, 2),
(105, 'Microwave', 'Home Appliances', 7000, 3),
(106, 'Vacuum Cleaner', 'Home Appliances', 5000, 3),
(107, 'Smartphone', 'Electronics', 22000, 4);

INSERT INTO Customers VALUES
(1, 'Ravi', 'Delhi', '2021-02-15'),
(2, 'Simran', 'Mumbai', '2020-03-20'),
(3, 'John', 'Bangalore', '2022-06-10'),
(4, 'Asha', 'Pune', '2021-07-25');

INSERT INTO Orders VALUES
(1001, 1, 101, '2023-01-15', 1),
(1002, 2, 103, '2023-02-17', 2),
(1003, 1, 107, '2023-03-20', 1),
(1004, 3, 105, '2023-03-22', 1),
(1005, 4, 104, '2023-04-10', 3),
(1006, 2, 102, '2023-05-14', 1);

Select * from Sellers 
Select * from Products 
Select * from Customers 
Select * from Orders 

--1) Calculate total revenue generated by each seller.
Select
	s.SellerID,s.SellerName,
	Coalesce(Sum(p.Price*o.Quantity),0) as [Total Revenue]
from Sellers s
left join Products p
on s.SellerID =p.SellerID 
left join Orders o
on p.ProductID =o.ProductID 
Group by s.SellerID,s.SellerName
Order by [Total Revenue] Desc;

--2) Find top 2 best-selling products by quantity sold.
SELECT TOP 2
    p.ProductID,p.ProductName,p.Category, 
    SUM(o.Quantity) AS [Total Quantity Sold],
    COUNT(DISTINCT o.OrderID) AS [Number of Orders] 
FROM Products p
JOIN Orders o ON p.ProductID = o.ProductID
GROUP BY p.ProductID, p.ProductName, p.Category
ORDER BY [Total Quantity Sold] DESC;

--3) Identify sellers who have not sold any product in 2023.
SELECT
    s.SellerID,s.SellerName
FROM Sellers s
WHERE s.SellerID NOT IN (
    SELECT DISTINCT p.SellerID
    FROM Products p
    JOIN Orders o ON p.ProductID = o.ProductID
    WHERE YEAR(o.OrderDate) = 2023)
ORDER BY s.SellerName;

--4) List customers who have ordered from more than one category.
SELECT
    c.CustomerID,c.CustomerName
FROM Customers c
WHERE c.CustomerID IN (
    SELECT o.CustomerID
    FROM Orders o
    JOIN Products p ON o.ProductID = p.ProductID
    GROUP BY o.CustomerID
    HAVING COUNT(DISTINCT p.Category) > 1)
ORDER BY c.CustomerName;

--5) Show month-over-month revenue growth for 2023.
With MonthlyRevenue as (
				Select
					YEAR(o.OrderDate) as Year,
					MONTH(o.OrderDate) as Month,
					SUM(p.Price *o.Quantity) as Revenue
				from Orders o
				join Products p
				on p.ProductID =o.ProductID 
				where YEAR(o.OrderDate)=2023
				Group by YEAR(o.OrderDate),MONTH(o.OrderDate)),
RevenueWithPrevious as (
				Select
					Year,Month,Revenue,
					LAG(Revenue) OVER (ORDER BY Year, Month) AS PreviousMonthRevenue
					FROM MonthlyRevenue)
SELECT
    Year,Month,
    Revenue AS CurrentMonthRevenue,
    PreviousMonthRevenue,
    CASE 
        WHEN PreviousMonthRevenue IS NULL THEN NULL
        ELSE ROUND(((Revenue - PreviousMonthRevenue) / PreviousMonthRevenue) * 100, 2)
    END AS GrowthPercentage
FROM RevenueWithPrevious
ORDER BY Year, Month;

--6) Find the category with the highest average selling price.
SELECT TOP 1
    p.Category,
    ROUND(AVG(p.Price), 2) AS [Average Product Price]
FROM Products p
WHERE p.ProductID IN (SELECT ProductID FROM Orders)  -- Only products that have been ordered
GROUP BY p.Category
ORDER BY [Average Product Price] DESC;

--7) List products that have never been ordered.
Select
	p.ProductID,p.ProductName
from Products p
left join Orders o
on p.ProductID =o.ProductID 
where o.OrderID is null;

--8) Retrieve each customer's first purchase date and product.
SELECT
    c.CustomerID,c.CustomerName,c.City,
    p.ProductID,p.ProductName,p.Category,
    o.OrderDate AS FirstPurchaseDate
FROM Customers c
JOIN Orders o ON c.CustomerID = o.CustomerID
JOIN Products p ON o.ProductID = p.ProductID
WHERE o.OrderDate = (
    SELECT MIN(OrderDate) 
    FROM Orders 
    WHERE CustomerID = c.CustomerID)
ORDER BY c.CustomerID;

--9) Calculate running total revenue for each seller.
Select
	s.SellerID,s.SellerName,o.OrderDate,
	SUM(p.Price*o.Quantity) as DailyRevenue,
	SUM(SUM(p.Price * o.Quantity)) OVER (
        PARTITION BY s.SellerID 
        ORDER BY o.OrderDate
        ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
    ) AS RunningTotalRevenue
FROM Sellers s
JOIN Products p ON s.SellerID = p.SellerID
JOIN Orders o ON p.ProductID = o.ProductID
GROUP BY s.SellerID, s.SellerName, o.OrderDate
ORDER BY s.SellerID, o.OrderDate;

--10) Find sellers whose all products belong to the same category.
SELECT 
    s.SellerID,s.SellerName,
    MAX(p.Category) AS Category  -- All products are the same category, so MAX/MIN doesn't matter
FROM Sellers s
JOIN Products p ON s.SellerID = p.SellerID
GROUP BY s.SellerID, s.SellerName
HAVING COUNT(DISTINCT p.Category) = 1
ORDER BY s.SellerID;
	
--Bonus Challenge: 
--Determine each seller’s contribution (%) to total marketplace revenue.
SELECT
    s.SellerID,s.SellerName,
    COALESCE(SUM(p.Price * o.Quantity), 0) AS TotalRevenue,
    ROUND(
        COALESCE(SUM(p.Price * o.Quantity), 0) * 100.0 / 
        NULLIF(SUM(SUM(p.Price * o.Quantity)) OVER (), 0),
        2
    ) AS RevenuePercentage
FROM Sellers s
LEFT JOIN Products p ON s.SellerID = p.SellerID

LEFT JOIN Orders o ON p.ProductID = o.ProductID
GROUP BY s.SellerID, s.SellerName
ORDER BY RevenuePercentage DESC;

